#!/usr/bin/env python3
import requests
import re
import urllib.parse as urlparse
import sys

import json

def crtsh(host):
    """
    Uses crt.sh to enumerate subdomains of a website. It goes as deep as possible and scans all subdomains with wildcard.
    :param host:
    :return:
    """
    subdomains = []
    enumerable = []

    r = requests.get(f'https://crt.sh/?Identity=%.{host}&output=json')
    obj = json.loads(r.text)

    for i in range(0, len(obj)):
        if '*.' not in obj[i]['name_value']:
            for each in obj[i]['name_value'].split('\n'):
                if each not in subdomains:
                    subdomains.append(each)
                    print(each)

    for i in range(0, len(obj)):
        if '*.' in obj[i]['name_value']:
            for each in obj[i]['name_value'].split('\n'):
                if each not in enumerable:
                    enumerable.append(each)
                    print(each)
                for website in enumerable:
                    target = website.replace("*.", "%.")
                    r = requests.get(f'https://crt.sh/?Identity={target}&output=json')
                    obj = json.loads(r.text)
                    for i in range(0, len(obj)):
                        if '*.' not in obj[i]['name_value']:
                            for each in obj[i]['name_value'].split('\n'):
                                if each not in subdomains:
                                    subdomains.append(each)
                                    print(each)
                        elif '*.' in obj[i]['name_value']:
                            for each in obj[i]['name_value'].split('\n'):
                                if each not in enumerable:
                                    enumerable.append(each)
                                    print(each)
                        else:
                            pass
        else:
            pass
    return subdomains


try:
    print(crtsh(sys.argv[1]))
    for sub in subdomains:
        print(crtsh(sub))
    for enum in enumerable:
        print(crtsh(enum))
except ConnectionResetError:
    print("[+] Peer Reset Connection")
    pass
