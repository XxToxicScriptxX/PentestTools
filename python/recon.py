#!/usr/bin/env python3
import subprocess
import requests
import socket


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def scan_dig(domain):
	print(bcolors.OKBLUE + f"\t\t\t"+"#"*10 + f" scanning {domain} with dig for IPv4 " + "#"*10 + bcolors.ENDC)
	print(f"{domain} IPv4 address is : {ip}")
	return domain


def port_scan(domain):
	print(bcolors.OKBLUE + f"\t\t\t"+"#"*10 + f" scanning {ip} masscan for all ports 1-65535 " + "#"*10 + bcolors.ENDC)
	print(bcolors.OKGREEN + f"{domain} open ports :"), subprocess.call(f"sudo masscan -p80,1-65535 {ip} --open --banners --rate=10000",shell=True)
	subprocess.call(f"sudo nmap -sV -O --version-all --system-dns {ip}",shell=True)
	print(bcolors.ENDC)


def grab_headers(domain):
	r = requests.get("https://" + domain)
	try:
		headers=[]
		response_header=r.headers
		for i in response_header:
			if i not in headers:
				headers.append(i)
		for header in headers:
			print(bcolors.OKBLUE + bcolors.BOLD + f"{header}: "+r.headers[f'{header}'] + bcolors.ENDC)

		if "X-XSS-Protection" in response_header:
			print("\n")
			print(bcolors.FAIL + bcolors.BOLD + "#"*50 + "\n\tXSS-Protection Header Detected\n" + "#" * 50 + "\n" + bcolors.ENDC)
		if "BIG-IP" in response_header:
			print("\n\n")
			print(bcolors.WARNING + "Detected possible load balancer" + bcolors.ENDC)
		detect_waf()
	except KeyError:
		print(bcolors.ENDC)
		pass


def detect_waf():
	try:
		cf_keywords=["cf-ray","cloudflare","CF-Cache-Status","CF-RAY","cloudflare.com","cf-request-id","__cfuid="]
		try:
			r = requests.get("https://" + domain)
		except requests.exceptions.SSLError:
			r = requests.get("http://" + domain + ":8080")
		response_header=r.headers
		if "X-Akamai-Path-Stats" in response_header:
			waf="Akamai"
			waf_msg(waf)
		elif  "X-Akamai-Transformed" in response_header:
			waf="Akamai"
			waf_msg(waf)
		elif "aeSecure-code" in response_header:
			waf="aeSecure"
			waf_msg(waf)
		elif "AL-SESS" in response_header:
			waf="Airlock"
			waf_msg(waf)
		elif "AL-LB" in response_header:
			waf="Airlock"
			waf_msg(waf)
		elif "X-ASPNET-Version" in response_header:
			waf="ASP.NET Generic"
			waf_msg(waf)
		elif "Powered-by-ChinaCache" in response_header:
			waf="ChinaCache"
			waf_msg(waf)
		elif "ACE XML Gateway" in response_header:
			waf="Cisco ACE XML Gateway"
			waf_msg(waf)
		elif "Malicious Code Detected" in response_header:
			waf="Cloudbric"
			waf_msg(waf)
		elif "CloudfloorDNS WAF" in response_header:
			waf="CloudfloorDNS"
			waf_msg(waf)
		elif "Protected by COMODO WAF" in response_header:
			waf="COMODO"
			waf_msg(waf)
		elif "crawlprotect" in response_header:
			waf="CrawlProtect"
			waf_msg(waf)
		elif "X-Distil-CS" in response_header:
			waf="Distil Web Protection"
			waf_msg(waf)
		elif "X-DIS-Request-ID" in response_header:
			waf="DoSArrest Internet Security"
			waf_msg(waf)
		elif "X-dotDefender-denied" in response_header:
			waf="DotDefender"
			waf_msg(waf)
		else: 
			for i in cf_keywords:
				if i in response_header or response_header['Report-To:']:
					waf="Cloudflare"
					waf_msg(waf)
				else:
					waf="Unkown"
					waf_msg(waf)
					pass

	except KeyError:
		print(bcolors.ENDC)
		print("Detected CTRL + C Exiting")
		pass


def waf_msg(waf):
	print("\n")
	print(bcolors.FAIL + bcolors.BOLD + "#"*50 + f"\n\t{waf} WAF Detected\n" + "#" * 50 + "\n" + bcolors.ENDC)


def main():
	scan_dig(domain=domain)
	grab_headers(domain=domain)
	user_input = "y"#input("would you like to masscan scan all ports? (its faster than nmap) [y/n]:")
	if user_input == "y":
		try:
			
			port_scan(domain=domain)
		except KeyboardInterrupt:
			print("[+] Exiting")
			pass
	else:
		
		print("[-] Exiting ")


file = open('targets.txt')
line = file.readline()
while line:
	domain = line.rstrip('\n')
	ip=socket.gethostbyname(f'{domain}')
	main()
	line=file.readline()
